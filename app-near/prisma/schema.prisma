// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "rhel-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum SurveyPhase {
  STEP_1_NEIGHBORHOOD_INFORMATION
  STEP_2_SU_SURVERY
  STEP_3_SU_EXPLORATION
  STEP_4_ADDITIONAL_SURVEY
  STEP_5_RESULTS
}

model Survey {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  phase                 SurveyPhase             @default(STEP_1_NEIGHBORHOOD_INFORMATION)
  sampleTarget          Int?                    @map("sample_target")
  thresholdReached      Boolean                 @default(false)
  quartier              Quartier?
  suAnswer              SuAnswer[]
  wayOfLifeAnswer       WayOfLifeAnswer[]
  carbonFootprintAnswer CarbonFootprintAnswer[]
  suData                SuData[]
  computedSu            Boolean                 @default(false)

  @@map("surveys")
}

enum AgeCategory {
  FROM_15_TO_29
  FROM_30_TO_44
  FROM_45_TO_59
  FROM_60_TO_74
  ABOVE_75
}

enum Gender {
  MAN
  WOMAN
  OTHER
}

enum ProfessionalCategory {
  CS1
  CS2
  CS2_platform_entrepreneurship
  CS3
  CS4
  CS5
  CS6
  CS7
  CS8_unemployed
  CS8_student
  CS8_home
}

enum EasyHealthAccess {
  EASY
  MODERATE
  HARD
}

enum MeatFrequency {
  MINOR
  REGULAR
  MAJOR
}

enum TransportationMode {
  CAR
  PUBLIC
  LIGHT
}

enum DigitalIntensity {
  LIGHT
  REGULAR
  INTENSE
}

enum PurchasingStrategy {
  NEW
  MIXED
  SECOND_HAND
}

enum AirTravelFrequency {
  ZERO
  FROM_1_TO_3
  ABOVE_3
}

enum HeatSource {
  ELECTRICITY
  GAZ
  OIL
}

enum BroadcastChannel {
  mail_campaign
  social_network
  qr_code
  street_survey

  @@map("BroadcastChanel")
}

model SuAnswer {
  id                   Int                  @id @default(autoincrement())
  ageCategory          AgeCategory          @map("age_category")
  gender               Gender
  professionalCategory ProfessionalCategory @map("professional_category")
  easyHealthAccess     EasyHealthAccess     @map("easy_healt_access")
  meatFrequency        MeatFrequency        @map("meat_frequency")
  transportationMode   TransportationMode   @map("transportation_mode")
  digitalIntensity     DigitalIntensity     @map("digital_intensity")
  purchasingStrategy   PurchasingStrategy   @map("purchasing_strategy")
  airTravelFrequency   AirTravelFrequency   @map("air_travel_frequency")
  heatSource           HeatSource           @map("heat_source")
  email                String?
  broadcastChannel     BroadcastChannel     @map("broadcast_channel")
  emailApiCalled       Boolean?             @default(false) @map("email_api_called")
  suId                 Int?                 @map("su_id")
  su                   SuData?              @relation(fields: [suId], references: [id])
  distanceToBarycenter Float?               @map("distance_to_barycenter")
  surveyId             Int
  survey               Survey               @relation(fields: [surveyId], references: [id])
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @default(now()) @updatedAt @map("updated_at")

  @@map("su_answer")
}

model SuData {
  id                    Int                     @id @default(autoincrement())
  surveyId              Int                     @map("survey_id")
  survey                Survey                  @relation(fields: [surveyId], references: [id])
  su                    Int
  popPercentage         Float                   @map("pop_percentage")
  barycenter            Json
  SuAnswer              SuAnswer[]
  wayOfLifeAnswer       WayOfLifeAnswer[]
  carbonFootprintAnswer CarbonFootprintAnswer[]
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @default(now()) @updatedAt @map("updated_at")

  @@unique([surveyId, su])
  @@map("su_data")
}

model WayOfLifeAnswer {
  id               Int              @id @default(autoincrement())
  email            String?
  broadcastChannel BroadcastChannel @map("broadcast_channel")
  emailApiCalled   Boolean?         @default(false) @map("email_api_called")
  surveyId         Int
  survey           Survey           @relation(fields: [surveyId], references: [id])
  suId             Int?             @map("su_id")
  su               SuData?          @relation(fields: [suId], references: [id])
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at")

  @@map("way_of_life_answer")
}

model CarbonFootprintAnswer {
  id               Int              @id @default(autoincrement())
  email            String?
  broadcastChannel BroadcastChannel @map("broadcast_channel")

  globalNote Float @map("global_note")

  transportation                          Float
  transportationCar                       Float   @map("transportation_car")
  transportationCarKm2                    String?   @map("transportation_car_km2")
  transportationCarOilConsumption100      String? @map("transportation_car_oil_consumption_100")
  transportationCarOilType                String? @map("transportation_car_oil_type")
  transportationCarElectricConsumption100 String? @map("transportation_car_electric_consumption_100")
  transportationPlane                     Float   @map("transportation_plane")
  transportationBicycle                   Float   @map("transportation_bicycle")
  transportationSoftMobility              Float   @map("transportation_soft_mobility")
  transportationTrain                     Float   @map("transportation_train")
  transportationPublicTransport           Float   @map("transportation_public_transport")
  transportationCarLongDistance           String? @map("transportation_car_long_distance")
  transportationHollidays                 Float   @map("transportation_hollidays")
  transportationHollidaysCaravan          String? @map("transportation_hollidays_caravan")
  transportationHollidaysCampingCar       String? @map("transportation_hollidays_camping_car")
  transportationHollidaysVan              String? @map("transportation_hollidays_van")
  transportationHollidaysRentalVehicle    String? @map("transportation_hollidays_rental_vehicle")
  transportationHollidaysCruise           String? @map("transportation_hollidays_cruise")
  transportationFerry                     Float   @map("transportation_ferry")

  alimentation                 Float
  alimentationMeals            Float   @map("alimentation_meals")
  alimentationLunchDinner      Float   @map("alimentation_lunch_dinner")
  alimentationBonus            Float   @map("alimentation_bonus")
  alimentationLocalImpact      Float   @map("alimentation_local_impact")
  alimentationLocalConsumption String? @map("alimentation_local_consumption")
  alimentationSeasonalImpact   Float   @map("alimentation_seasonal_impact")
  alimentationAnnualBreakfast  Float   @map("alimentation_annual_breakfast")
  alimentationDeforestation    Float   @map("alimentation_deforestation")
  alimentationDrinks           Float   @map("alimentation_drinks")
  alimentationHotDrinks        Float   @map("alimentation_hot_drinks")
  alimentationColdDrinks       Float   @map("alimentation_col_drinks")
  alimentationWaste            Float   @map("alimentation_waste")
  alimentationWasteHabits      String? @map("alimentation_waste_habits")

  logement                                  Float
  logementConstruction                      Float   @map("logement_construcion")
  logementConstructionBase                  Float   @map("logement_construcion_base")
  logementConstructionCooling               Float   @map("logement_construcion_cooling")
  logementConstructionRenovation            Float   @map("logement_renovation")
  logementConstructionDeforestation         Float   @map("logement_deforestation")
  logementConstructionSoilArtificialization String? @map("logement_construcion_soil_artificialization")
  logementElectricity                       Float   @map("logement_electricity")
  logementElectricityTotalConsumption       Float   @map("logement_total_consumption")
  logementElectricitySolarAutoconsumption   String? @map("logement_electricity_solar_auto_consumption")
  logementElectricityCarbonIntensity        Float   @map("logement_electricity_carbon_intensity")
  logementHeating                           Float   @map("logement_heating")
  logementAirConditioning                   Float   @map("logement_air_conditioning")
  logementSwimmingPool                      String? @map("logement_swimming_pool")
  logementOutdor                            Float   @map("logement_outdor")
  logementHollidays                         Float   @map("logement_hollidays")
  logementHollidaysHotelImpact              String? @map("logement_hollidays_hotel_impact")
  logementHollidaysCampingImpact            String? @map("logement_hollidays_camping_impact")
  logementHollidaysYouthHostelImpact        String? @map("logement_hollidays_youth_hostel_impact")
  logementHollidaysRentalImpact             String? @map("logement_hollidays_tental_impact")
  logementHollidaysHomeExchangeImpact       String? @map("logement_hollidays_home_exchange_impact")
  logementHollidaysSecondaryHomeImpact      String? @map("logement_hollidays_second_home_impact")

  divers                           Float
  diversHouseholdAppliances        Float   @map("divers_household_applicances")
  diversHouseholdAppliancesDevices Float   @map("divers_household_applicances_devices")
  diversFurniture                  Float   @map("divers_furniture")
  diversFurnitureItems             Float   @map("divers_furniture_items")
  diversFurnitureDeforestation     Float   @map("divers_furniture_deforestation")
  diversFurniturePreservation      String? @map("divers_preservation")
  diversDigital                    Float   @map("divers_digital")
  diversDigitalInternet            Float   @map("divers_digital_internet")
  diversDigitalDevices             Float   @map("divers_digital_devices")
  diversTextile                    Float   @map("divers_textile")

  servicesSocietal Float   @map("services_societal")
  servicesPublics  String? @map("services_publics")
  servicesMarket   String? @map("services_market")

  emailApiCalled Boolean? @default(false) @map("email_api_called")
  surveyId       Int
  survey         Survey   @relation(fields: [surveyId], references: [id])
  suId           Int     @map("su_id")
  su             SuData?  @relation(fields: [suId], references: [id])
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  answers Json

  @@map("carbon_footprint_answer")
}

model InseeIris2021 {
  iris           String @unique @db.VarChar(255)
  com            String @db.VarChar(255)
  typ_iris       String @db.VarChar(255)
  lab_iris       String @db.VarChar(255)
  p21_pop        Float?
  p21_pop0002    Float?
  p21_pop0305    Float?
  p21_pop0610    Float?
  p21_pop1117    Float?
  p21_pop1824    Float?
  p21_pop2539    Float?
  p21_pop4054    Float?
  p21_pop5564    Float?
  p21_pop6579    Float?
  p21_pop80p     Float?
  p21_pop0014    Float?
  p21_pop1529    Float?
  p21_pop3044    Float?
  p21_pop4559    Float?
  p21_pop6074    Float?
  p21_pop75p     Float?
  p21_pop0019    Float?
  p21_pop2064    Float?
  p21_pop65p     Float?
  p21_poph       Float?
  p21_h0014      Float?
  p21_h1529      Float?
  p21_h3044      Float?
  p21_h4559      Float?
  p21_h6074      Float?
  p21_h75p       Float?
  p21_h0019      Float?
  p21_h2064      Float?
  p21_h65p       Float?
  p21_popf       Float?
  p21_f0014      Float?
  p21_f1529      Float?
  p21_f3044      Float?
  p21_f4559      Float?
  p21_f6074      Float?
  p21_f75p       Float?
  p21_f0019      Float?
  p21_f2064      Float?
  p21_f65p       Float?
  c21_pop15p     Float?
  c21_pop15p_cs1 Float?
  c21_pop15p_cs2 Float?
  c21_pop15p_cs3 Float?
  c21_pop15p_cs4 Float?
  c21_pop15p_cs5 Float?
  c21_pop15p_cs6 Float?
  c21_pop15p_cs7 Float?
  c21_pop15p_cs8 Float?
  c21_h15p       Float?
  c21_h15p_cs1   Float?
  c21_h15p_cs2   Float?
  c21_h15p_cs3   Float?
  c21_h15p_cs4   Float?
  c21_h15p_cs5   Float?
  c21_h15p_cs6   Float?
  c21_h15p_cs7   Float?
  c21_h15p_cs8   Float?
  c21_f15p       Float?
  c21_f15p_cs1   Float?
  c21_f15p_cs2   Float?
  c21_f15p_cs3   Float?
  c21_f15p_cs4   Float?
  c21_f15p_cs5   Float?
  c21_f15p_cs6   Float?
  c21_f15p_cs7   Float?
  c21_f15p_cs8   Float?
  p21_pop_fr     Float?
  p21_pop_etr    Float?
  p21_pop_imm    Float?
  p21_pmen       Float?
  p21_phormen    Float?

  @@map("insee_iris_2021")
}

view Quartier {
  iris_selectors                    String[]
  population_sum_with_under_fifteen Float
  population_sum                    Float
  p21_pop1529_sum                   Float
  p21_pop3044_sum                   Float
  p21_pop4559_sum                   Float
  p21_pop6074_sum                   Float
  p21_pop75p_sum                    Float
  c21_pop15p_cs1_sum                Float
  c21_pop15p_cs2_sum                Float
  c21_pop15p_cs3_sum                Float
  c21_pop15p_cs4_sum                Float
  c21_pop15p_cs5_sum                Float
  c21_pop15p_cs6_sum                Float
  c21_pop15p_cs7_sum                Float
  c21_pop15p_cs8_sum                Float
  population_femme_sum              Float
  population_homme_sum              Float
  population_sum_threshold_3p       Float
  population_sum_threshold_4p       Float
  population_sum_threshold_4_5p     Float
  population_sum_threshold_5p       Float
  surveyId                          Int      @unique @map("survey_id") // Foreign key unique field to survey
  survey                            Survey   @relation(fields: [surveyId], references: [id])

  @@map("quartiers")
}
