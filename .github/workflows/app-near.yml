name: Next app tests

on:
  pull_request:
    branches: [develop]
    paths:
      - 'app-near/**'

defaults:
  run:
    working-directory: ./app-near

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: app-near
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install
        run: npm ci

      - name: Create .env file
        run: cp .env.example .env

      - name: Run Prisma migrations
        run: npx prisma db push
      
      - name: Test
        run: | 
          npm run test:server
          npm run test:shared
          npm run test:components

      - name: Build
        run: npm run build

      # - name: Accessibility test
      #   run: |
      #     npm run dev & npx -y wait-on http://localhost:3000
      #     npm install -g pa11y
      #     pa11y http://localhost:3000
